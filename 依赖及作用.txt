1.express:express 基于node平台 开发的一个极其轻量的框架
    全局安装环境 npm install express –g
    安装npm install express-generator –g
    脚手架创建项目 express  -e  project_name（项目名字）
2.mongodb:NodeJS连接MongoDB
    .1 引入mongodb依赖在项目中
        var mongodb = require("mongodb")
    .2 创建数据库连接服务
        mongodb.Server()
    .3 数据库连接
        Var db=mongodb.Db()
    快速创建连接对象
        Var  mongodb=require(‘mongodb’).MongoClient;
        Var db_str=“mongodb://localhost:27017/xxxx”
        Mongodb.connect(db_str,()=>{})
3.mongooes
    辅助我们对MongoDB的数据进行操作
    mongoose的核心对象
        .1 Schema
            它是一种以文件形式存储的数据库模型骨架，不具备对数据库操作的能力，
            仅仅只是数据库在程序片段中的一种表现，可以理解为表结构
        .2 model
            model模型具有对数据库操作的能力。
4.cors
    解决跨域问题
    首先在本地安装cors依赖 : npm i cors --save-dev
    在主文件进行配置(app.js)，在路由之前，在服务对象上挂载 ： app.use(cors())
5.http-proxy-middleware
    适用于前端请求一些网络服务器
    用于后台将请求转发给其它服务器(在express脚手架中使用，前端html必须跟后台统一服务器)
    npm install http-proxy-middleware --save-dev
    在主文件进行配置(app.js)
        var proxy = require('http-proxy-middleware');
        在路由之前，在服务对象上，通过app.use()来指向一个目标路径，用来携带要请求的网络路径
        app.use('/api', proxy({target: 'http://10.119.168.87:4000', changeOrigin: true}));
        使发到3000端口的/api请求转发到了4000端口。即请求http://localhost:3000/api相当于请求http://10.119.168.87:4000/api
6.session
    客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。
    客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。
    npm install express-session -g
    npm install express-session -D
    .1在主配置文件 app.js 内引入session依赖：var session=require('express-session')
    .2在路由挂载之前进行配置：app.use(session({
                                secret: 'recommend 128 bytes random string', 
                                cookie: { maxAge: 20 * 60 * 1000 },//存放的时间
                                resave: true,
                                saveUnintialized: true
                            }))
    .3session的销毁
        .1 req.session.username = undefined;
        .2 req.session.destroy(function(err){		
                if(err){			
                    console.log(err)		
                }else{			
                    res.redirect("/")		
                }	
            })
7.token验证-jsonwebtoken
    npm  install jsonwebtoken --save-dev
    var jwt = require('jsonwebtoken')

    router.post('/login',(req,res)=>{
        let username=req.body.username;
        let password=req.body.password;
        let content = {username:username};
        let miyao = "jwt";
        let token = jwt.sign(content,miyao,{expiresIn:30*1*1})
        res.json({code:200,msg:"登陆成功",token:token})	
    })

    //token验证
    // router.post("/yanzheng",(req,res)=>{
    //   let token = req.headers.token;
    //   let miyao = "jwt";
    //   jwt.verify(token,miyao,(err,data)=>{
    //     if(err){
    //       res.json({msg:"登录过期"})；
    //     }else{
    //       res.json({msg:""})
    //     }
    //   })
    // })
8.富文本编辑器 multiparty 依赖

9.async-异步流程控制
    1)安装该模块
	    1、npm init  	2、npm i  async  -D
    2)串行无关联     async. series()
        1、做两个串行的异步请求，无关联，无论什么时候返回，都能拿到结果
        2、总的事件执行时间和为几个事件执行时间之和
        3、series串行方法=>第一个参数传入数组/对象，数组/对象内传入n个异步方法，第二个参数对一系列方法的结果处理
    3)并行无关联    async. parallel () 
        两个并行（两个同时执行）的操作，没关联－－时间为某个事件执行的最长时间
    4)串行有关联   async.waterfall()
10.ssr-服务端渲染
    npm install -g ssr  全局环境安装一次
    ssr相当于是搭建了一个 Mock Server ，构建假数据，然后把这些假数据存到 JSON 文件上，
    Mock Server 可以响应请求或者生成页面，当然也可以顺便生成 API 文档。
    优点：
    强制跨域访问(AJAX请求不报错)
    启动多个服务，自动解决端口冲突
    设置指定端口号
11.







