1.Restful api接口设计
    .1设计方式
        HEAD（SELECT）只获取某个资源的头部信息
        GET（SELECT）获取资源
        POST（CREATE）创建资源
        PATCH（UPDATE）更新资源的部分属性（很少用，一般用POST代替）
        PUT（UPDATE）更新资源，客户端需要提供新建资源的所有属性
        DELETE（DELETE）删除资源
    .2使用方式
        GET http://www.birjemin.com/api/user # 获取列表
        POST http://www.birjemin.com/api/user # 创建用户
        PUT http://www.birjemin.com/api/user/{id} # 修改用户信息
        DELETE http://www.birjemin.com/api/user/{id} # 删除用户信息
    .3过滤信息
        用于补充规范一些通用字段
        ?limit=10 # 指定返回记录的数量
        ?offset=10 # 指定返回记录的开始位置
        ?page=2&per_page=100 # 指定第几页，以及每页的记录数
        ?sortby=name&order=asc # 指定返回结果按照哪个属性排序，以及排序顺序
        ?state=close # 指定筛选条件
    .4状态码
        字段名称为：code
        200 OK [GET] 服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）
        201 CREATED [POST/PUT/PATCH] 用户新建或修改数据成功
        202 ACCEPTED [*] 表示一个请求已经进入后台排队（异步任务）
        204 NO CONTENT [DELETE] 用户删除数据成功
        400 INVALID REQUEST [POST/PUT/PATCH] 用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的
        401 UNAUTHORIZED [*] 表示用户没有权限（令牌、用户名、密码错误）
        403 FORBIDDEN [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的
        404 NOT FOUND [*] 用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的
        406 NOT ACCEPTABLE [GET] 用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）
        410 GONE [GET] 用户请求的资源被永久删除，且不会再得到的
        422 UNPROCESABLE ENTITY [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误
        500 INTERNAL SERVER ERROR [*] 服务器发生错误，用户将无法判断发出的请求是否成功
    .5错误信息
        字段名称：message
        示例
        {"code": 200,"message": "啊哈哈","succ": true,"data": [] }
        备注
        为了简便，有时候code没有，或者为0，message换成msg,这些实际上实在实际项目中的，不过还是要有一个规范出来，这样方便统一管理。
2.使用express 搭建接口
    脚手架默认有body-parser依赖(如果没有需安装),如果是post请求，通过req.body接收数据；如果是get请求，通过req.puery接收数据
    .1注册接口
    router.post('/register',(req,res)=>{
        let username=req.body.username;
        let password=req.body.password;
        mongodb.connect(db_str,(err,database)=>{
            database.collection('info',(err,coll)=>{
                coll.insert({username:username,password:password},()=>{
                    res.json({code:200,msg:'注册成功'})
                    database.close()
                })
            })
        })
    })
    .2登陆接口
    router.post('/login',(req,res)=>{
        let username=req.body.username;
        let password=req.body.password;
        mongodb.connect(db_str,(err,database)=>{
            database.collection('info',(err,coll)=>{
                coll.find({username:username,password:password}).toArray((err,data)=>{
                    if(data.length>0){
                        res.json({code:200,msg:"登陆成功"})
                        database.close()
                    }else{
                        res.json({code:404,msg:"用户名或者密码错误"})
                        database.close()
                    }
                })
            })
        })
        
    })

3.跨域的解决方案
    .1后端处理 （开启跨域）
        在响应头部设置允许跨域访问
        res.header("Access-Control-Allow-Orign","*")所有都可以访问当前路径
    .2Cors
        首先在本地安装cors依赖 : npm i cors --save-dev
        在主文件进行配置(app.js)，在路由之前，在服务对象上挂载 ： app.use(cors())
    .3 http-proxy-middleware (反向代理)
        适用于前端请求一些网络服务器
        用于后台将请求转发给其它服务器(在express脚手架中使用，前端html必须跟后台统一服务器)
        npm install http-proxy-middleware --save-dev
        在主文件进行配置(app.js)
            var proxy = require('http-proxy-middleware');
            在路由之前，在服务对象上，通过app.use()来指向一个目标路径，用来携带要请求的网络路径
            app.use('/api', proxy({target: 'http://10.119.168.87:4000', changeOrigin: true}));
            使发到3000端口的/api请求转发到了4000端口。即请求http://localhost:3000/api相当于请求http://10.119.168.87:4000/api






