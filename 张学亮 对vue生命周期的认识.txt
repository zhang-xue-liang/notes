1.什么是Vue生命周期？
    每个 Vue 实例在被创建时都要经过一系列的初始化过程，例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。
    同时在这个过程中也会运行一些叫做 生命周期钩子 的函数，我们可以在不同的阶段添加自己的代码。

2.vue生命周期的8个阶段
    .1 beforeCreate
        在new一个vue实例后，只有一些默认的生命周期钩子和默认事件，其他的东西都还没创建。在beforeCreate生命周期执行的时候，data和methods中的数据都还没有初始化。
        不能在这个阶段使用data中的数据和methods中的方法
        可以在这个阶段添加 loading事件
    .2 created
        data 和 methods都已经被初始化好了，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。
        如果要调用 methods 中的方法，或者操作 data 中的数据，最早可以在这个阶段中操作
        在这个阶段结束 loading事件
    .3 beforeMount
        执行到这个钩子的时候，在内存中已经编译好了模板，但是还没有挂载到页面中，此时，页面还是旧的
        该钩子在服务器端渲染期间不被调用.
    .4 mounted
        el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。
        如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。
        如果我们想要通过插件操作页面上的DOM节点，最早可以在和这个阶段中进行
        该钩子在服务器端渲染期间不被调用.
        在这个阶段可以发起后端请求，拿回数据，配合路由钩子做一些事情
    .5 beforeUpdate
        这个钩子发生在虚拟 DOM 重新渲染和打补丁之前。页面中的显示的数据还是旧的，data中的数据是更新后的， 
        页面还没有和最新的数据保持同步
        该钩子在服务器端渲染期间不被调用。
        可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。
    .6 updated
        由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。
        当这个钩子被调用时，组件 DOM 已经更新，页面显示的数据和data中的数据已经保持同步了，都是最新的,所以现在可以执行依赖于 DOM 的操作。
        然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。
        该钩子在服务器端渲染期间不被调用。
    .7 beforeDestroy
        Vue实例从运行阶段进入到了销毁阶段，
        这个时候,所有的 data 和 methods, 指令、过滤器等，都是处于可用状态。还没有真正被销毁
        该钩子在服务器端渲染期间不被调用。
    .8 destroyed
        Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。
        需要调用Vue实例的 destroy方法 (this.$destroy())
        该钩子在服务器端渲染期间不被调用。


