1.开发规范
    .1工作目录构建 － 简介清晰，命名合理，直观(用相同含义的英文单词命名)
    .2代码命名规范 － 与实际模块功能英文保持一致；注释，换行，嵌套合理;
    .3开发文档 － 交接文档一目了然
2.开发规范文档
    .1基本原则
        1.结构HTML、样式css、行为js，三者要分离，尽量确保文档和模板只包含HTML结构，样式放在样式表里，行为放脚本里。
        2.缩进:统一缩进方式，整体tab/整体空格
        3.文件编码：在HTML中指定编码<mate charset="utf-8"></mate>,无需使用@charset(css样式表指定字符集的编码)
        4.HTML元素一律使用小写字母
        5.外链资源：省略(图片或其他媒体资源)URL中的http/https协议，使URL成为相对地址，其他协议的URL不省略
        6.统一注释
            HTML注释区分模块和区块内容
            css注释组件块和子组件块以及声明块之间使用空行分隔，子组件块之间三空行分隔
            js注释区分单行和多行注释和文件注释(用于告诉不熟悉这段代码的读者这个文件包含哪些东西。应该提供文件的大体内容，作者，依赖关系和兼容信息)
    2.HTML
        .1通用规定
            1.1 标签：单标签无需闭合，双标签必须闭合；尽量减少标签数和复杂度
            1.2 class和id：class应以功能或内容命名，不已表现形式命名；单词过长时，应注意书写格式；id作为选择器唯一表示符(钩子机制)，同时避免创建无样式信息的class
            1.3 属性编写顺序：id>class>name>data-**>src>for>type>href>title>alt>aria-**/role
            1.4 尽量使用双引号定义元素属性
            1.5元素嵌套
                <a>元素不要嵌套<a>元素，也不要嵌套<div>元素
                严格嵌套模式下：<a>元素不可以嵌套交互式元素<a>,<button>,<select>等
                <p>元素不可以嵌套块级元素，<div>,<h1>-<h6>,<p>,<ul>,<form>等
            1.6布尔值属性
                disable,checked,select,等属性不用设置值            
3.工作规范
    .1日报 － 当天完成了哪些工作，遇到的问题，如何解决的，收获是什么。明天的计划
    .2周报 － 总结一周工作汇报
    .3邮件发送 － 发送给你的直接领导，抄送CTO 等其他相关人员
4.框架发展历史
    .1 web1.0时代，并没有前端的概念，开发的语言使用的也是最初的JSP、ASP和PHP
这种架构的好处是简单快捷。使用Eclipse+tomcat就可以之间把程序跑起来  。
    缺点：1.业务体系增大，调试困难
          2.JSP代码难以维护
    .2 后端的MVC时代,前后端开始形成了一定的分离。
       前端只需要在本地编写好相应的页面，然后交给后端开发的人,这是前端只完成了后端开发中的view层内容
    缺点：1.前端页面开发效率不高
          2. 前后端职责不清
    .3 前端的MVC时代，通过ajax与后台服务器进行数据的交换，而且ajax可以使得页面实现部分刷新，极大的减少了之前需要反复开发的页面。
    缺点：前端缺乏一种可行的开发模式。整体的内容都杂糅在一起，一旦应用增大，就会导致难以维护了
5.MVC模式
    backbone.js框架就是这种的模式
        前端的MVC应该与后端类似，具备着View、Controller和Model。
        Model：负责保存应用数据，与后端数据进行同步
        Controller：负责业务逻辑，根据用户行为对Model数据进行修改
        View：负责视图展示，将model中的数据可视化出来。
        缺点：1. 数据流混乱， model和view这一块的数据交互，非常的混乱，而且维护起来非常麻烦
              2.  View比较庞大，而Controller比较单薄：由于很多的开发者都会在view中写一些逻辑代码，
                  逐渐的就导致view中的内容越来越庞大，而controller变得越来越单薄
6.MVP模式
    MVP 全称：Model-View-Presenter ；MVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方：
    Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。
    presenter负责和Model进行双向交互，还和View进行双向交互。这种交互方式，相对于MVC来说少了一些灵活，
    VIew变成了被动视图，并且本身变得很小。虽然它分离了View和Model，
    缺点：由于大部分逻辑都需要presenter去进行管理，从而导致presenter的体积增大，难以维护
7.MVVM模式
    MVVM可以分解成(Model-View-VIewModel)。ViewModel可以理解为在presenter基础上的进阶版
    好处就是View和Model之间被分离开来。view不知道model的存在，viewmodel和model也觉察不到view。
    事实上，model也完全忽略viewmodel和view的存在。这是一个非常松散耦合的设计。
    优点：1. 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的"View"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。
          2.可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。
          3. 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。
          4. 可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写
8.主流框架
    backbone.js
	AngularJS – 特指angular1.0
	ReactJS － 15版本与16版本
	VUEJS
	Angular 指代 angular 2，4，5，6，7等高版本

          






       
